{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "copyright_notice": "Copyright 2020 Stephen Tetley, Magnus Madsen",
    "license": "Apache License, Version 2.0",
    "name": "flix",
    "scopeName": "source.flix",
    "patterns": [
        {
            "include": "#constants"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#annotations"
        },
        {
            "include": "#comments"
        },
        {
            "include": "#literal_char"
        },
        {
            "include": "#literal_string"
        }
    ],
    "repository": {
        "constants": {
            "patterns": [
                {
                    "name": "constant.language.unit.flix",
                    "match": "\\b\\(\\)\\b"
                },
                {
                    "name": "constant.language.bool.flix",
                    "match": "\\b(true|false)\\b"
                },
                {
                    "name": "constant.language.null.flix",
                    "match": "\\b(null)\\b"
                },
                {
                    "name": "constant.language.effect.flix",
                    "match": "\\b(Pure|Impure)\\b"
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "name": "keyword.control.if.flix",
                    "match": "\\b(if|else)\\b"
                },
                {
                    "name": "keyword.control.choose.flix",
                    "match": "\\b(choose)\\b"
                },
                {
                    "name": "keyword.control.match.flix",
                    "match": "\\b(case|match)\\b"
                },
                {
                    "name": "keyword.control.spawn.flix",
                    "match": "\\b(spawn)\\b"
                },
                {
                    "name": "keyword.control.select.flix",
                    "match": "\\b(select)\\b"
                },
                {
                    "name": "keyword.operator.bool.flix",
                    "match": "\\b(not|and|or)\\b"
                }, 
                {
                    "name": "keyword.declaration.flix",
                    "match": "\\b(namespace|def|law|enum|case|type|rel|lat|alias)\\b"
                },
                {
                    "name": "keyword.expression.cast.flix",
                    "match": "\\b(as)\\b"
                }, 
                {
                    "name": "keyword.expression.default.flix",
                    "match": "\\b(default)\\b"
                },
                {
                    "name": "keyword.expression.fixpoint.flix",
                    "match": "\\b(solve|project)\\b"
                },                
                {
                    "name": "keyword.expression.force.flix",
                    "match": "\\b(force)\\b"
                },
                {
                    "name": "keyword.expression.jvm.flix",
                    "match": "\\b(import|new|get|set)\\b"
                },
                {
                    "name": "keyword.expression.let.flix",
                    "match": "\\b(let\\*|let)\\b"
                },
                {
                    "name": "keyword.expression.lazy.flix",
                    "match": "\\b(lazy)\\b"
                },
                {
                    "name": "keyword.expression.references.flix",
                    "match": "\\b(ref|deref)\\b"
                },
                {
                    "name": "keyword.expression.use.flix",
                    "match": "\\b(use)\\b"
                },
                {
                    "name": "keyword.modifier.flix",
                    "match": "\\b(opaque|pub|inline|mut)\\b"
                },
                {
                    "name": "keyword.type.builtin.flix",
                    "match": "\\b(Unit|Bool|Char|Float32|Float64|Int|Int8|Int16|Int32|Int64|String|BigInt|Option|Result|Choice|Array|List)\\b"
                },
                
                {
                    "name": "keyword.symbols.flix",
                    "match": "(\\->|=>|<\\-)"
                },
                {
                    "name": "keyword.operators.flix",
                    "match": "(==|\\|>|\\+|\\-|\\*|>>|<<|::|:::)"
                }
            ]
        },
        "annotations": {
            "patterns": [
                {
                    "name": "annotation.benchmark.flix",
                    "match": "\\b(@benchmark)\\b"
                },
                {
                    "name": "annotation.test.flix",
                    "match": "\\b(@test)\\b"
                }    
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.line.double-slash.flix",
                    "match": "//.*$"
                },
                {
                    "name": "comment.block.flix",
                    "begin": "/\\*",
                    "end": "\\*/"
                }
            ]
        },
        "literal_char": {
            "name": "string.quoted.single.flix",
            "begin": "'",
            "end": "'",
            "patterns": [
                {
                    "name": "constant.character.escape",
                    "match": "\\\\."
                }
            ]
        },
        "literal_string": {
            "name": "string.quoted.double.flix",
            "begin": "\"",
            "end": "\"",
            "patterns": [
                {
                    "name": "constant.character.escape.flix",
                    "match": "\\\\."
                }
            ]
        }
    }
}
